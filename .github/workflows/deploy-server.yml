name: Deploy Server AWS

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'
  workflow_dispatch:
    
jobs:
  build-test-server:
    name: Build/Test Server
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache-dependency-path: 'server/go.sum'

    - name: Test
      working-directory: server
      run: go test ./...

    - name: Build
      working-directory: server
      run: go build -v .

  build-staging:
    name: Build Server Staging
    environment: staging
    needs: 
      - build-test-server
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Server image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPO_NAME_SERVER: ${{ secrets.ECR_REPO_NAME_SERVER }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO_NAME_SERVER:$IMAGE_TAG ./server
        docker tag $ECR_REGISTRY/$ECR_REPO_NAME_SERVER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO_NAME_SERVER:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPO_NAME_SERVER:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO_NAME_SERVER:$GITHUB_SHA

  deploy-staging:
    name: Deploy server Staging
    environment: staging
    needs: 
      - build-staging
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download task definition
      env:
        ECS_FAMILY_NAME_SERVER: ${{ secrets.ECS_FAMILY_NAME_SERVER }}
      run: |
        aws ecs describe-task-definition --task-definition $ECS_FAMILY_NAME_SERVER --query taskDefinition | jq -r 'del(
          .taskDefinitionArn,
          .requiresAttributes,
          .compatibilities,
          .revision,
          .status,
          .registeredAt,
          .registeredBy
        )' > task-definition.json
        
    - name: Update Image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPO_NAME_SERVER: ${{ secrets.ECR_REPO_NAME_SERVER }}
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.ECS_CONTAINER_NAME_SERVER }}
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_NAME_SERVER }}:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE_NAME_SERVER }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true