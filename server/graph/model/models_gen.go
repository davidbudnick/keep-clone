// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewNote struct {
	Title  string `json:"title"`
	Body   string `json:"body"`
	Status string `json:"status"`
	Pinned bool   `json:"pinned"`
}

type Note struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	Title     string `json:"title"`
	Body      string `json:"body"`
	Status    string `json:"status"`
	Pinned    bool   `json:"pinned"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type NoteMutationResponse struct {
	Success bool   `json:"success"`
	ID      string `json:"id"`
}

type Query struct {
}

type UpdateNote struct {
	ID     string `json:"id"`
	Title  string `json:"title"`
	Body   string `json:"body"`
	Status string `json:"status"`
	Pinned bool   `json:"pinned"`
}

type Status string

const (
	StatusActive   Status = "ACTIVE"
	StatusArchived Status = "ARCHIVED"
	StatusDeleted  Status = "DELETED"
)

var AllStatus = []Status{
	StatusActive,
	StatusArchived,
	StatusDeleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusArchived, StatusDeleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
