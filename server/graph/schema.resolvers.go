package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"log/slog"
	"server/graph/model"
	"server/internal/app/jwt"
	"server/internal/middleware"
)

// CreateNote is the resolver for the createNote field.
func (r *mutationResolver) CreateNote(ctx context.Context, input model.CreateNote) (*model.Note, error) {
	if !model.Status(input.Status).IsValid() {
		slog.ErrorContext(ctx, "invalid status", "status", input.Status)
		return nil, fmt.Errorf("invalid status")
	}

	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	note, err := r.NotesService.Create(ctx, userID, input)
	if err != nil {
		return nil, err
	}

	return note, nil
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, input model.UpdateNote) (*model.Note, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	res, err := r.NotesService.Update(ctx, userID, input)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id string) (string, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return "", err
	}

	res, err := r.NotesService.Delete(ctx, userID, id)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// EmptyTrash is the resolver for the emptyTrash field.
func (r *mutationResolver) EmptyTrash(ctx context.Context) ([]*model.Note, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	notes, err := r.NotesService.RemoveDeleted(ctx, userID)
	if err != nil {
		return nil, err
	}

	return notes, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	user, err := r.UsersService.Update(ctx, userID, input)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// Notes is the resolver for the Notes field.
func (r *queryResolver) Notes(ctx context.Context, status *model.Status) ([]*model.Note, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	notes, err := r.NotesService.List(ctx, status.String(), userID)
	if err != nil {
		return nil, err
	}

	return notes, nil
}

// Note is the resolver for the Note field.
func (r *queryResolver) Note(ctx context.Context, id string) (*model.Note, error) {
	userID, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	note, err := r.NotesService.Get(ctx, userID, id)
	if err != nil {
		return nil, err
	}

	return note, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	_, err := middleware.ValidateJWT(ctx, r.JWTConfig)
	if err != nil {
		return nil, err
	}

	user, err := r.UsersService.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// AuthLogin is the resolver for the authLogin field.
func (r *queryResolver) AuthLogin(ctx context.Context, code string) (*model.AuthUser, error) {
	googleUser, authTokens, err := jwt.GenerateTokens(ctx, code, r.JWTConfig)
	if err != nil {
		slog.ErrorContext(ctx, "Error generating tokens", "error", err)
		return nil, err
	}

	user, err := r.UsersService.Update(ctx, googleUser.UserID, model.UpdateUser{
		UserID:     googleUser.UserID,
		Email:      googleUser.Email,
		Name:       googleUser.Name,
		Picture:    googleUser.Picture,
		GivenName:  googleUser.GivenName,
		FamilyName: googleUser.FamilyName,
		Hd:         googleUser.HD,
		LastLogin:  authTokens.Exp,
	})
	if err != nil {
		slog.ErrorContext(ctx, "Error upserting user", "error", err)
		return nil, err
	}

	return &model.AuthUser{
		User:   user,
		Tokens: authTokens,
	}, nil
}

// AuthRefreshToken is the resolver for the authRefreshToken field.
func (r *queryResolver) AuthRefreshToken(ctx context.Context, refreshToken string) (string, error) {
	tokenResponse, err := jwt.RefreshAccessToken(ctx, refreshToken, r.JWTConfig)
	if err != nil {
		slog.ErrorContext(ctx, "Error refreshing token", "error", err)
		return "", err
	}

	//TODO: return full user object
	return tokenResponse.AccessToken, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
