/* tslint:disable */
/* eslint-disable */
/**
 * Keep Clone
 * Rest endpoints
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Note } from '../models';
import { NoteRequest } from '../models';
/**
 * NotesApi - axios parameter creator
 * @export
 */
export const NotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new note for a given userID.
         * @summary Create a new note
         * @param {NoteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote: async (body: NoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNote.');
            }
            const localVarPath = `/notes/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of a specific note by its noteID
         * @summary Retrieve a specific note
         * @param {string} noteID The ID of the note to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteByID: async (noteID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteID' is not null or undefined
            if (noteID === null || noteID === undefined) {
                throw new RequiredError('noteID','Required parameter noteID was null or undefined when calling getNoteByID.');
            }
            const localVarPath = `/notes/get/{noteID}`
                .replace(`{${"noteID"}}`, encodeURIComponent(String(noteID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of active notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveNotes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notes/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of archived notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchivedNotes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notes/list/archived`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of deleted notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeletedNotes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notes/list/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of an existing note by its noteID
         * @summary Update an existing note
         * @param {NoteRequest} body 
         * @param {string} userID The ID of the user.
         * @param {string} noteID The ID of the note to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote: async (body: NoteRequest, userID: string, noteID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateNote.');
            }
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new RequiredError('userID','Required parameter userID was null or undefined when calling updateNote.');
            }
            // verify required parameter 'noteID' is not null or undefined
            if (noteID === null || noteID === undefined) {
                throw new RequiredError('noteID','Required parameter noteID was null or undefined when calling updateNote.');
            }
            const localVarPath = `/notes/update/{noteID}`
                .replace(`{${"noteID"}}`, encodeURIComponent(String(noteID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserIDAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-User-Id")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-User-Id"] = localVarApiKeyValue;
            }

            if (userID !== undefined && userID !== null) {
                localVarHeaderParameter['userID'] = String(userID);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotesApi - functional programming interface
 * @export
 */
export const NotesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new note for a given userID.
         * @summary Create a new note
         * @param {NoteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNote(body: NoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).createNote(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the details of a specific note by its noteID
         * @summary Retrieve a specific note
         * @param {string} noteID The ID of the note to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteByID(noteID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).getNoteByID(noteID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of active notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveNotes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Note>>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).listActiveNotes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of archived notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArchivedNotes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Note>>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).listArchivedNotes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List notes by UserID
         * @summary Get a list of deleted notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeletedNotes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Note>>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).listDeletedNotes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the details of an existing note by its noteID
         * @summary Update an existing note
         * @param {NoteRequest} body 
         * @param {string} userID The ID of the user.
         * @param {string} noteID The ID of the note to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNote(body: NoteRequest, userID: string, noteID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Note>>> {
            const localVarAxiosArgs = await NotesApiAxiosParamCreator(configuration).updateNote(body, userID, noteID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotesApi - factory interface
 * @export
 */
export const NotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new note for a given userID.
         * @summary Create a new note
         * @param {NoteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNote(body: NoteRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NotesApiFp(configuration).createNote(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of a specific note by its noteID
         * @summary Retrieve a specific note
         * @param {string} noteID The ID of the note to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteByID(noteID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NotesApiFp(configuration).getNoteByID(noteID, options).then((request) => request(axios, basePath));
        },
        /**
         * List notes by UserID
         * @summary Get a list of active notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveNotes(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Note>>> {
            return NotesApiFp(configuration).listActiveNotes(options).then((request) => request(axios, basePath));
        },
        /**
         * List notes by UserID
         * @summary Get a list of archived notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArchivedNotes(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Note>>> {
            return NotesApiFp(configuration).listArchivedNotes(options).then((request) => request(axios, basePath));
        },
        /**
         * List notes by UserID
         * @summary Get a list of deleted notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeletedNotes(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Note>>> {
            return NotesApiFp(configuration).listDeletedNotes(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of an existing note by its noteID
         * @summary Update an existing note
         * @param {NoteRequest} body 
         * @param {string} userID The ID of the user.
         * @param {string} noteID The ID of the note to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNote(body: NoteRequest, userID: string, noteID: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Note>> {
            return NotesApiFp(configuration).updateNote(body, userID, noteID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export class NotesApi extends BaseAPI {
    /**
     * Create a new note for a given userID.
     * @summary Create a new note
     * @param {NoteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async createNote(body: NoteRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NotesApiFp(this.configuration).createNote(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the details of a specific note by its noteID
     * @summary Retrieve a specific note
     * @param {string} noteID The ID of the note to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async getNoteByID(noteID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NotesApiFp(this.configuration).getNoteByID(noteID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List notes by UserID
     * @summary Get a list of active notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async listActiveNotes(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Note>>> {
        return NotesApiFp(this.configuration).listActiveNotes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List notes by UserID
     * @summary Get a list of archived notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async listArchivedNotes(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Note>>> {
        return NotesApiFp(this.configuration).listArchivedNotes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List notes by UserID
     * @summary Get a list of deleted notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async listDeletedNotes(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Note>>> {
        return NotesApiFp(this.configuration).listDeletedNotes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the details of an existing note by its noteID
     * @summary Update an existing note
     * @param {NoteRequest} body 
     * @param {string} userID The ID of the user.
     * @param {string} noteID The ID of the note to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public async updateNote(body: NoteRequest, userID: string, noteID: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Note>> {
        return NotesApiFp(this.configuration).updateNote(body, userID, noteID, options).then((request) => request(this.axios, this.basePath));
    }
}
